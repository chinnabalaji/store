FRONT END
F-T1: AUTHENICATION
TEST: login page test
Purpose: TO create an access to the customer to login into the dashboard.it is also used to prevent unauthorised users to login into the page
requirements:
Environment: browser for rendering the webpages, php
	Preinstalled PHP
	Open terminal
	Run command: sudo apt-get install php5-server
	Pre-installed apache server
	Run command: sudo apt-get install apache2
	Pre-installed MYSQL database
	  Run command: sudo apt -get update
	Run command: sudo apt-get upgrade
	Run command: sudo apt-get install mysql-server
	 Database must be created for the users to store data

operations:
	open web browser
	go to login html page from local host and enter user credentials
	if correct credentials are entered, it will direct to dashboard?	if incorrect credentials are entered, alter message is shown and access will be not granted
Expected result: displays the dashboard to the users and where the user can upload the files
result:
Comment: before rendering the webpage apache2 status must be checked. “service apache2” status on the terminal

F-T2: receive update on status and uptime of service
Test: notification test
Purpose: to check the automatic update of service and service uptime
Requirements:
Environment: web browser, apache server
•	preinstalled php5
	open terminal
	run command: sudo apt-get install php5
•	preinstalled apache server
	run command: sudo apt-get install apache2
•	preinstalled MySQL database
	run command: sudo apt-get install MySQL-server
	database must be created with tables containing fields for status and uptime for each service
	it shows the service we provide and also the status of each server are kept in this tables
Operation:
•	Open web browser
•	Enter the dash board through the login page
•	On the home page to the right we show all the services we provide for uploading the files and altering the files
•	When the server is down the ping is continuously done and when server is back we inform it to the admin server
•	On the statistics page the uptime of each server are kept and we see if the server is online or not if it is down we note the time and repair it manually
Expected result: status changes from running to ERROR when a service stops. When a service is restarted, the uptime is updated and reset
Result:
F-T3: uploading the files
Test: upload of files
Purpose: to check whether the files are uploaded into the dashboard
Requirements:
Environment: web browser, MySQL
•	Preinstalled php5
	Open terminal
	Run command: sudo apt-get install php5
•	Preinstalled MYSQL database
	Run command: sudo apt-get install mysql server
	Database must be created to upload the files for the customer
	Files must be uploaded into his dashboard
Operations:
•	Open web browser
•	Enter the dashboard through the login page
•	Upload the files by pressing over the upload option. The user space is limited
Expected result: the files are uploaded into the user dashboard and these files show the space occupied in the dashboard
Result:
DATA BASE
D-T1: MySQL database contains user credentials
Module: php :: MySQL
Purpose: for interaction between php script and MySQL
Requirements:
Environment: MySQL database contains a table in the database for the user credentials
•	Pre-installed php5
	Open terminal
	Request command: sudo apt-get install php5
•	Preinstalled MySQL database
	Run command: sudo apt-get install MySQL server
	Database must be created with tables containing fields for status and uptime of server
	Database provides each customer a space to store the files with a limited space
OPERATIONS:
•	Open web browser
•	Enter the tool dashboard click on register new user. enter the requested credentials. a new user is created
•	Open MYSQL in terminal by entering” MySQL -u user -p”
•	Check users table in the tools database for the registered user credentials
EXPECTED RESULT: the table contains user credentials as created from the front end
Result:
D-T2: MYSQL database contains status and uptime data
MODULE: MySQL
Purpose: to ensure the database contains status and uptime
Requirements:
Environment: 
MYSQL database contains a table in the database for user credentials
•	Preinstalled MYSQL database 
	Run command: sudo apt-get install MySQL-server
	Database must be created with tables containing fields for status uptime for each server
	Each server has an independent table containing the time at which it lost connection 
OPERATION:
•	Run backend script so that script can ping the servers and insert status and uptime into the corresponding tables
•	Open MySQL in terminal by entering $ MySQL -u user -p
•	Check <server _name> table in the tools database for the status and uptime of each server
Expected result: the <server_name> table contains the status and uptime data
Result:
D-T3: MYSQL database for each user
Module: MYSQL
Purpose: for creation of database for the user
Requirements:
Environment: MYSQL database creation of customer database
•	Preinstalled MYSQL server
	Run command: sudo apt-get install MySQL server
	To create a separate database for each customer
	All the files are stored in his personal database

Operation:
•	Open web browser
•	Enter the login details of the customer and login into dashboard 
•	At the right side all the options are present to upload files
Expected result: the user is allocated with a database to store the information.
Result:



BACK END
B-t1: ensure establishment of secure connection between user and server
Module: python
Purpose: to execute commands and create a connection between user and server
ENVIORNMENT:
OPERATION:
•	It is used to establish a connection between user and server
•	When the user logins into the server through login page the connection or selection of server is random process
•	The user can upload the files into the servers
Expected result: it is used to select a random server to the user and establish a connection between them
Result
B-T2: status and uptime of servers are to be known through pinging
module: python::MySQL
purpose: to insert status and uptime in mysql database. Later the server that is down is manually repaired
requirements:
Environment: 
•	python connection
•	establish connection between backend and database
•	MYSQL database containing tables for each server
OPERATIONS:
•	To check that the servers are online or not
•	The constant pinging process is done through the python coding
Expected result: establishment of secure connection between database and backend. the servers working is known through constant pinging of the server
Result:
b-t3 creation of the replicas
module: restful API
purpose: to create the replicas of the files and save them in main server and their links are to be kept In other servers
requirements:
environment:
operation:
•	when the user uploads the files, replicas of the files are done
•	the replicas are created in all the servers so that when the server is down it doesn’t affect the customer
•	this is done through the restful API
expected result: creation of the replicas of the files that are uploaded into the database through the restful API
result:
